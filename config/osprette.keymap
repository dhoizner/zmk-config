/*
* Copyright (c) 2021 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/* source keypos definitions */
#include "../zmk-nodefree-config/keypos_def/keypos_34keys_osprette.h"
#include "../zmk-nodefree-config/helper.h"

#include "extra_keys.h"

#define XXX &none
#define ___ &trans

#define QUICK_TAP_MS 175

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

#define MAIN 0
#define SYM 1
#define NAV 2
#define BT 3
/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH1 LH0 RH0 RH1 // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

/ {
    combos {
        compatible = "zmk,combos";

        combo_grave {
            timeout-ms = <100>;
            key-positions = <RB1 RB2>;
            bindings = <&kp GRAVE>;
        };

				combo_dollar {
            timeout-ms = <100>;
            key-positions = <RB2 RB3>;
            bindings = <&kp DOLLAR>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        MAIN_layer {
            bindings = <
                             &kp W       &kp F        &kp P         &kp B            &kp J     &kp L       &kp U           &kp Y
          &kp Q &kp A        &kp R       &kp S        &lt SYM T     &kp G            &kp M     &lt SYM N   &kp E           &kp I          &kp O          &kp SQT
                &hml LSHFT Z &hml LALT X &hml LCTRL C &hml LGUI D   &kp V            &kp K     &hmr RGUI H &hmr RCTRL COMMA  &hmr RALT DOT &hmr RSHFT FSLH
                                                      &lt BT ENTER  &lt NAV SPACE    &sk RSHFT &kp BSPC
            >;
        };

        SYM_layer {
            bindings = <
                             &kp GRAVE   &kp DQT      &kp RBRC      &kp QMARK        &kp LPAR   &kp LBKT &kp RPAR  &kp RBKT
       &kp LBRC &trans    &kp EQUAL   &kp UNDER    &kp TILDE     &kp STAR         &none   &kp EXCL &kp AT    &kp HASH &kp SEMI  &none
                &kp LT       &kp PIPE    &kp MINUS    &kp GT        &kp FSLH         &kp BSLH   &kp PLUS &kp AMPS  &none    &none
                                                      &kp PERCENT   &kp COLON        &none      &none
            >;
        };

        NAV_layer {
            bindings = <
                           &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT &kp C_PP           &none     &kp F7  &kp F8 &kp F9
     &kp C_PREV &kp LEFT   &kp DOWN     &kp UP       &kp RIGHT  &kp LC(TAB)        &kp PSCRN &kp F1  &kp F2 &kp F3 &kp F10 &kp F12
                &kp HOME   &kp PG_DN    &kp PG_UP    &kp END    &kp LS(LC(TAB))    &kp CAPS  &kp F4  &kp F5 &kp F6 &kp F11
                                                     &none      &none              &trans    &kp DEL
            >;
        };

        BT_layer {
            bindings = <
                      &none &none &none &none    &none &none        &none        &none
          &none &none &none &none &none &none    &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &none
                &none &none &none &none &none    &none &bt BT_CLR   &none        &none        &none
                                  &none &none    &none &none
            >;
        };
    };
};

/* vim: set ft=c tw=174: */
